"""–ú–æ–¥—É–ª—å 11. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""


kk('Hello gnvno!')
A = 1
B = 10

whil A (*values: object, sep: Optional[str]=..., Op)


"""–ë–ª–æ–∫ 11.1 –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ß–∞—Å—Ç—å 1"""

# frm6_1 = r'7(-\d{3}){2}(-\d{2}){2}'
# frm6_2 = r'8(-\d{3})(-\d{4}){2}'

# regrex_21 = r'beegeek'
# regrex_22 = r'...\....'
# regrex_23 = r'1\d\d'
# regrex_24 = r'\d{3}-\d{3}-\d{4}'

"""–ë–ª–æ–∫ 11.2 –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ß–∞—Å—Ç—å 2"""

# regrex_16 = r'[a-zA-z]\d{4}'
# regrex_17 = r'[a-z]\d[a-z][A-Z]{2}'
# regrex_18 = r'\d[aeiouy][^b^c^D^F]\S[^A^E^I^O^U^Y][^;]'
# regrex_19 = r'[123][012][12x][03aA][xsu][.,]'
# regrex_20 = r'+7'   # ?????
# regrex_22 = r''  #??????

"""–ë–ª–æ–∫ 11.3 –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ß–∞—Å—Ç—å 3"""

# regrex_17 = r'[A-Z]{5}\d{4}[A-Z]'
# regrex_18 = r'<!--*?-->'
# regrex_19 = r'[A-Z]{,3}\d{2,8}[A-Z]{3}'
# regrex_20 = r'[A-Z]{1,2}\d[\d|A-Z]'

"""–ë–ª–æ–∫ 11.4 –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ß–∞—Å—Ç—å 4"""

# regrex_10 = r'[aA]n?'
# regrex_11 = r'\W[A-Z]\W'
# regrex_12 = r'\W[A-Z]*?\W'
# regrex_13 = r'\n*(*)*\n'
# regrex_14 = r'\n\d{2,}[a-z]*[A-Z]*'
# regrex_15 = r'\n[A-Za-z]s\n'
# regrex_16 = r'[(A-Za-z)|(24680)]{40}[(13579)|\s]'
# regrex_17 = r'\n((Mr.)|(Mrs.)|(Ms.)|(Dr.)|(Er.))[A-Za-z]{1,}'
# regrex_18 = r'\n\d{1,2}[A-Za-z]{3,}[.]{1,3}'

"""–ë–ª–æ–∫ 11.5 –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ß–∞—Å—Ç—å 5"""

# rezrex_5 = '\d{5}(-\d{4})?'
# rezrex_6 = '(\(\d{3}\)|\d{3})(\s|-)\d{3}-\d{4}'
# rezrex_7 = '(bee).*'
# rezrex_12 = '([A-Za-z])\w[A-Z]'

""" –ë–ª–æ–∫ 11.6 –ú–æ–¥—É–ª—å re. –ß–∞—Å—Ç—å 1"""

"""‚Ññ 9 –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞"""

# import re

# with open('9/6', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()

# for number in data:
#     pattern = (r'(?P<area_code>[0-9]{1,3})(?P<sep>[ -])'
#                r'(?P<city_code>[0-9]{1,3})(?P=sep)(?P<number>[0-9]{4,10})')
#     match = re.match(pattern, number.strip())
#     if match:
#         print(f'–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {match.group("area_code")}, –ö–æ–¥ –≥–æ—Ä–æ–¥–∞: '
#               f'{match.group("city_code")}, –ù–æ–º–µ—Ä: {match.group("number")}')

"""‚Ññ 10 –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK"""

# import re

# with open('10/6', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()

# for number in data:
#     pattern = r'_[0-9]+[A-Za-z]*_?'
#     match = re.fullmatch(pattern, number.strip())
#     print(bool(match))

"""‚Ññ 11 –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–ª–æ–≥–∏"""

# import re

# with open('11/6', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()

# for number in data:
#     pattern = r'(?P<slog>.*)(?P=slog)'
#     match = re.fullmatch(pattern, number.strip())
#     if match:
#         print(match.group())

"""‚Ññ 12 Beegeek"""

# import re

# with open('12/5', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()
#     patbee = r'(bee)'
#     patgeek = r'\bgeek\b'
#     bee, geek = 0, 0

# for string in data:
#     string = string.strip()
#     match = re.search(patbee, string)
#     if match:
#         if re.search(patbee, string[match.end():]):
#             bee +=1
#     if re.search(patgeek, string):
#         geek +=1

# print(bee, geek, sep='\n')

"""‚Ññ 13 –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å"""

# import re

# with open('13/7', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()
#     bg = 'beegeek'

# pat3 = r'^beegeek.*beegeek$'
# pat2 = r'(^beegeek.*)|(.*beegeek$)'
# pat1 = r'beegeek'
# ball = 0

# for string in data:
#     string = string.strip()
#     bal3 = re.search(pat3, string)
#     bal2 = re.search(pat2, string)
#     bal1 = re.search(pat1, string)
#     if bal3:
#         ball += 3
#     elif bal2:
#         ball += 2
#     elif bal1:
#         ball += 1
#     elif string == 'beegeek':
#         ball += 2

# print(ball)

"""‚Ññ 19 –£–≤–∞–∂–µ–Ω–∏–µ"""

# import re
# from re import IGNORECASE, MULTILINE

# text = '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –Ω–µ –∑–∞–Ω—è—Ç—ã?'

# pattern = r'^–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|^–î–æ–±—Ä—ã–π –¥–µ–Ω—å|^–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ|^–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä'
# if re.search(pattern, text, flags=IGNORECASE | MULTILINE):
#     print(True)
# else:
#     print(False)

"""‚Ññ 20 –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"""

# import re
# from re import IGNORECASE

# with open('20/4', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()

# cnt = 0
# for string in data:
#     string = string.strip()
#     if re.search(r'beegeek', string, flags=IGNORECASE):
#         cnt += 1

# print(cnt)

"""–ë–ª–æ–∫ 11.2 –ú–æ–¥—É–ª—å re —á–∞—Å—Ç—å 2"""

"""‚Ññ 11 –ü–æ–¥—Å–ª–æ–≤–∞"""

# import re

# with open('211/1', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()

# cnt = 0

# text = data[0].strip()
# word = data[1].strip()
# words = re.findall(rf'\w({word})\w', text)

# print(len(words))

"""‚Ññ 12 –°–ª–æ–≤–∞"""

# import re

# with open('212/5', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()

# cnt = 0

# text = data[0].strip()
# word = data[1].strip()
# words = re.findall(rf'(\W({word})\W)|(^{word}\W)|(\W{word}$)', text)

# print(len(words))

"""‚Ññ 13 –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏ —Ä–∞–∑–Ω—ã–µ"""

# import re
# from re import IGNORECASE

# with open('213/1', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()

# cnt = 0

# word = data[0].strip()[:-2] + '[sz]e'
# text = data[1].strip()

# words = re.findall(rf'\b{word}\b', text,
#                    flags=IGNORECASE)

# print(len(words))

"""‚Ññ 14 –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏ —Ä–∞–∑–Ω—ã–µ"""

# import re
# from re import IGNORECASE

# with open('214/3', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()

# cnt = 0

# word = data[0].strip()[:-2] + 'u?r'
# text = data[1].strip()

# words = re.findall(rf'\b{word}\b', text,
#                    flags=IGNORECASE)

# print(len(words))

"""‚Ññ 15 –§—É–Ω–∫—Ü–∏—è abbreviate()"""

# import re

# def abbreviate(phrase):
#     pattern = r'\b.|[A-Z]'
#     words = re.findall(pattern, phrase)
#     result = ''
#     for word in words:
#         if word.strip():
#             result += word[0].upper()
#     return result

# print(abbreviate('javaScript object notation'))
# print(abbreviate('frequently asked questions'))
# print(abbreviate('JS game sec'))
# print(abbreviate('gaveOver GameStarted happyEnd happyend'))

"""‚Ññ 16 HTML"""

# import re
# from re import IGNORECASE

# with open('216/5', encoding='UTF-8') as inp_file:
#     data = inp_file.readlines()

# pattern = r'href="(.*)">(.*)</a>'

# for string in data:
#     htm = re.search(pattern, string)

#     if htm:
#         print(htm.group(1), end=', ')
#         print(htm.group(2))

"""‚Ññ 17 HTML           –ù–ê –ü–û–¢–û–ú"""

# import re
# from re import IGNORECASE

# with open('217/1', encoding='UTF-8') as inp_file:
#     data = inp_file.read()

# tag = r'<(?P<tag>\w+)'
# propert = f'(?P<prop>\w+)='
# tag_pro = r'<(?P<tag>.\w+) (?P<prop>\w+)='
# res = re.findall(tag, data)
# rezp = re.findall(propert, data)
# rezall = re.findall(tag_pro, data)
# m_tag = re.search(tag, data)
# m_prop = re.search(propert, data)
# m_all = re.search(tag_pro, data)


# print(m_tag.group(1))
# print(m_prop.group(1))
# pass

"""–ë–ª–æ–∫ 11.8 –ú–æ–¥—É–ª—å re –ß–∞—Å—Ç—å 3"""

"""‚Ññ 9 –§—É–Ω–∫—Ü–∏—è normalize_jpeg()"""

# import re
# from re import sub

# def normalize_jpeg(filename):
#     return sub(r'.\w{3,4}$', r'.jpg', filename)

# print(normalize_jpeg('windows11.jpg'))

"""‚Ññ 10 –§—É–Ω–∫—Ü–∏—è normalize_whitespace()"""

# from re import sub

# def normalize_whitespace(string):
#     return sub(r' {2,}', r' ', string)

# print(normalize_whitespace('–¢—É—Ç –¢—É—Ç –Ω –µ —Ç –ª –∏ —à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤       !'))

"""‚Ññ 11 –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""

# import keyword
# from re import sub, IGNORECASE

# text = 'True and False - that is the question'

# for word in keyword.kwlist:
#     text = sub(rf'\b{word}\b', r'<kw>', text, flags=IGNORECASE)

# print(text)

"""‚Ññ 12 –ü–µ—Ä–≤—ã–µ –±—É–∫–≤—ã"""

# from re import sub

# text = 'Hi, everyone. Lets start a lesson!'

# print(sub(r'\b(\w)(\w)', r'\2\1', text))

"""‚Ññ 13 –£–º–Ω–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫   –ü–û–¢–û–ú"""

# from re import sub
# import re

# text = '0(s)he0(be)lie0(ve)d'
# pattern = r'(\d+)(\(.*\))'

# def multiply_words(match):
#     n = int(match.group(1))
#     word = match.group(2)
#     return word * n

# n = re.findall(pattern, text)

# print(sub(pattern, multiply_words, text))

"""‚Ññ 14 –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞   –ü–û–¢–û–ú"""

# from re import sub

# text = 'beegeek,beegeek,beegeek! python python.. Python.. stepik?stepik?stepik'
# pattern = r'(\.w).*(\1)+'

# print(sub(pattern, r'\1', text))

"""‚Ññ 15 –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ üå∂Ô∏èüå∂Ô∏è    –ü–û–¢–û–ú"""

# from re import sub
# import re

# pattern_one_string = r'(\n *)?(#+ .*\n)'
# pattern_end_string = r'(\n.*)?(  # .*)$'
# pattern_multistring = r'\n( *)""".*?"""\n'

# with open('315/1', encoding='UTF-8') as inp_file:
#     data = inp_file.read()

# one = re.findall(pattern_one_string, data, flags=re.M)
# end1 = re.findall(pattern_end_string, data, flags=re.M)

# multi1 = re.findall(pattern_multistring, data)#, flags=re.S)
# multi2 = re.search(pattern_multistring, data)#, flags=re.S)

# data = sub(pattern_one_string, r'\n', data, flags=re.M)
# data = sub(pattern_end_string, '', data, flags=re.M)
# data = sub(pattern_multistring, r'\n', data, flags=re.S)


# print(data)

"""–ë–õ–û–ö 11.9 –ú–æ–¥—É–ª—å re. –ß–∞—Å—Ç—å 4"""

"""‚Ññ 10 –¢–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π"""

# import re

# with open('410/14', encoding='UTF-8') as inp_file:
#     data = inp_file.read()

# pattern = r'\s*[.,;]\s*'

# print(*re.split(pattern, data))

"""‚Ññ 11 –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""

# import re

# with open('411/15', encoding='UTF-8') as inp_file:
#     data = inp_file.read()

# pattern = r'\s*\|\s*|\s*\&\s*|\s*and\s*|\s*or\s*'

# print(*re.split(pattern, data), sep=', ')

"""‚Ññ 12 –§—É–Ω–∫—Ü–∏—è multiple_split()"""

# import re

# def multiple_split(string, delimiters):
#     pattern = '|'.join(map(re.escape, delimiters))
#     pass
#     return re.split(pattern, string)

# print(multiple_split('There"was/a"small/boy"of/Quebec', ['/', '"']))

"""‚Ññ 19 –°—É–º–º–∞ —á–∏—Å–µ–ª"""

# import re

# with open('419/15', encoding='UTF-8') as inp_file:
#     st, en = map(int, inp_file.readline().split())
#     data = inp_file.readline()

# pattern = re.compile(r'\D?(\d+)\D?')
# result = sum(map(int, pattern.findall(data, st, en)))

# print(result)
